<div id="app">
    <div id="StartScreen" v-if="!started" class="full-center">
        <label for="message">Username</label><br />
        <input autocomplete="off" class="radius" type="text" id="message" /><br />
        <input class="btn btn-primary mt-5 w-100" type="button" v-on:click="AddToGroup" value="Play" />
    </div>
    <div class="sidebar" v-if="started">
        <div id="playersScreen" class="player-field text-center" v-for="player in room.players" v-bind:style="{ background: player.colorCode}">
            <span v-if="connectionId == player.connectionId">
                <b class="text-white">(You){{player.name}}</b><br />
                <b class="text-white">Score: {{player.score}}</b>
            </span>
            <span v-else>
                <b>{{player.name}}</b><br />
                <b>Score: {{player.score}}</b>
            </span>
        </div>
    </div>
    <div v-if="started">
        <div v-if="!done">
            <div class="m-3 flex-h-center">
                <h4>{{countDown}}</h4>
            </div>
            <div class="m-3 flex-h-center">
                <h3 class="text-center">{{room.question[0].questionText}}</h3>
            </div>
            <div class="center-block input-group mb-3 flex-h-center">
                <div class="center-block input-group mb-3 flex-h-center">
                    <input id="answer" type="text" name="name" value="" autocomplete="off" class="radius mr-4" v-model="answer" v-on:keyup.enter="Submit" />
                    <button class="btn btn-dark" v-on:click="Submit">Confirm</button>
                </div>
            </div>
            <div class="horizontal-center">
                <table class="w-100 horizontal-center">
                    <tr v-for="y in 5" class="text-center">
                        <td class="unanswered text-center" v-if="answered[y-1] == ''">
                            <b>{{y}}</b>
                        </td>
                        <td class="unanswered text-center" v-else v-bind:style="{ background: answeredColor[y-1]}">
                            <b>{{answered[y-1]}}</b>
                        </td>
                        <td class="text-center unanswered" v-if="answered[y+4] == ''">
                            <b>{{y + 5}}</b>
                        </td>
                        <td class="unanswered text-center" v-else v-bind:style="{ background: answeredColor[y+4]}">
                            <b>{{answered[y+4]}}</b>
                        </td>
                    </tr>
                </table>
            </div>
        </div>
        <div v-else>
            Done
        </div>
    </div>
</div>
<script>
    var connection = new signalR.HubConnectionBuilder()
        .withUrl('/quiz')
        .build();


    var app = new Vue({
        el: "#app",
        data: {
            connectionId: "",
            started: false,
            countDown: 20,
            answer: "",
            groupName: "",
            ready: false,
            room: [{
                id: "",
                name: "",
                players: [{
                    colorCode: "",
                    connectionId: "",
                    id: "",
                    name: ""
                }],
                public: true,
                question: [{
                    category: Array(1),
                    id: "",
                    questionText: ""
                }]
            }],
            answered: ["", "", "", "", "",
                "", "", "", "", ""],
            answeredColor: ["", "", "", "", "",
                "", "", "", "", ""],
        },
        methods: {
            Submit: function () {
                if (this.countDown != 0) {
                    let answerRequest = {
                        answerText: this.answer
                    }
                    axios
                        .post(url + 'api/Questions/player/' + this.connectionId + '/answer', answerRequest)
                        .then(r => {
                            if (r.data.place > 0) {
                                console.log(app.groupName)
                                connection.invoke('answer', r.data.place,
                                    answerRequest.answerText, this.room.players.filter(p => p.connectionId == this.connectionId)[0].colorCode)
                            }
                        })

                }
            },
            countDownTimer() {
                if (this.countDown >= 0) {
                    setTimeout(() => {
                        this.countDown -= 1
                        this.countDownTimer()
                    }, 1000)
                    this.ready = false
                } else {
                    if (this.ready == false) {
                        axios
                            .get(url + 'api/Rooms/Ready/' + this.connectionId)
                            .then(response => {

                                app.answered = ["", "", "", "", "",
                                    "", "", "", "", ""]
                                app.answeredColor = ["", "", "", "", "",
                                    "", "", "", "", ""]

                                if (response.data.amountOfUsers == response.data.amountOfReadyUsers) {
                                    connection.invoke('Refresh', app.groupName)
                                }

                                app.ready = true;
                            })
                    }
                }
            },
            AddToGroup: function () {
                let groupName = ""
                connection.invoke('AddToGroup', message.value)
                    .then(p => {
                        app.groupName = p;
                        groupName = p;
                        this.started = true;
                        axios
                            .get(url + 'api/Rooms/?name=' + groupName)
                            .then(response => {
                                console.log(response.data)
                                app.room = response.data
                                app.countDown = 20
                            })
                        connection.on('userJoined', function () {
                            axios
                                .get(url + 'api/Rooms/?name=' + groupName)
                                .then(response => {
                                    app.room = response.data
                                    app.countDown = 20
                                })
                        });
                        connection.on('userLeft', function () {
                            axios
                                .get(url + 'api/Rooms/?name=' + groupName)
                                .then(response => {
                                    app.room = response.data
                                })
                        });
                        connection.on('refresh', function () {
                            axios
                                .get(url + 'api/Rooms/?name=' + groupName)
                                .then(response => {
                                    app.room = response.data
                                    console.log(response.data)
                                    app.countDown = 20
                                    app.countDownTimer()
                                })
                        });
                        connection.on('showAnswer', function (place, answer, color) {

                            axios
                                .get(url + 'api/Rooms/?name=' + app.groupName)
                                .then(r => {
                                    app.room = r.data
                                })

                            for (var i = 0; i < 10; i++) {
                                if (i == place - 1) {
                                    app.answered[i] = answer
                                    app.answeredColor[i] = color
                                }
                            }
                        });
                    })


            }
        },
        created: function () {


            // Transport fallback functionality is now built into start.
            connection.start()
                .then(function () {
                    console.log('connection started');
                    connection.invoke('GetConnectionId')
                        .then(id => {
                            app.connectionId = id;
                        });
                    app.countDownTimer()
                })
                .catch(error => {
                    console.error(error.message);
                });


        },

    });
</script>