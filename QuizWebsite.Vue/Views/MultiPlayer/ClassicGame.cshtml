<div id="app">
    <div id="StartScreen" v-if="!started" class="full-center">
        <label for="message">Username</label><br />
        <input autocomplete="off"  type="text" id="message" /><br />
        <input class="btn btn-primary mt-5 w-100" type="button" v-on:click="AddToGroup" value="Play" />
    </div>
    <div class="sidebar" v-if="started">
        <div id="playersScreen" class="player-field text-center" v-for="player in players" v-bind:style="{ background: player.colorCode}">
            <b>{{player.name}}</b><br /><br />
            <b>Score: {{player.score}}</b>
        </div>
    </div>
    <div v-if="started">
        <div class="m-3 flex-h-center">
            <h3 class="text-center">vvvsd rg</h3>
        </div>
        <div class="center-block input-group mb-3 flex-h-center">
            <div class="center-block input-group mb-3 flex-h-center">
                <input id="answer" type="text" name="name" value="" autocomplete="off" class="radius mr-4" />
                <button class="btn btn-dark">Confirm</button>
            </div>
        </div>
        <div class="horizontal-center">
            <table class="w-100 horizontal-center">
                <tr v-for="y in 5" class="text-center">
                    <td class="unanswered text-center">
                        <b>{{y}}</b>
                    </td>
                    <td class="text-center unanswered">
                        <b>{{y + 5}}</b>
                    </td>
                </tr>
            </table>
        </div>
    </div>
</div>
<script>
    var connection = new signalR.HubConnectionBuilder()
        .withUrl('/quiz')
        .build();


    var app = new Vue({
        el: "#app",
        data: {
            started: false,
            players: [{
                name: ""
                }]
        },
        created: function () {


            // Transport fallback functionality is now built into start.
            connection.start()
                .then(function () {
                    console.log('connection started');

                })
                .catch(error => {
                    console.error(error.message);
                });


        },
        methods: {
            AddToGroup: function () {
                let groupName = ""
                connection.invoke('AddToGroup', message.value)
                    .then(p => {
                        groupName = p;
                        console.log(groupName)
                        this.started = true;
                        axios
                            .get(url + 'api/Rooms/?name=' + groupName)
                            .then(response => {
                                app.players = response.data.players
                            })
                        connection.on('userJoined', function () {
                            axios
                                .get(url + 'api/Rooms/?name=' + groupName)
                                .then(response => {
                                    app.players = response.data.players
                                })
                        });
                        connection.on('userLeft', function () {
                            axios
                                .get(url + 'api/Rooms/?name=' + groupName)
                                .then(response => {
                                    app.players = response.data.players
                                })
                        });
                    })


            }
        },
    });
</script>